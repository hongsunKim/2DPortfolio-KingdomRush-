#include "stdafx.h"
#include "soundManager.h"
soundManager::soundManager() : _system(NULL), _channel(NULL), _sound(NULL)
{
}
soundManager::~soundManager()
{
}

HRESULT soundManager::init(void)
{
	//사운드 시스템을 생성한다.
	System_Create(&_system);

	//사운드 채널수 생성
	_system->init(TOTALSOUNDBUFFER, FMOD_INIT_NORMAL, 0);

	//사운드와 채널 동적할당
	_sound = new Sound*[TOTALSOUNDBUFFER];
	_channel = new Channel*[TOTALSOUNDBUFFER];

	//메모리초기화
	memset(_sound, 0, sizeof(Sound*) * (TOTALSOUNDBUFFER));
	memset(_channel, 0, sizeof(Channel*)* (TOTALSOUNDBUFFER));

	return S_OK;
}

void soundManager::release(void)
{
	//사운드 및 채널 삭재
	if (_channel != NULL || _sound != NULL)
	{
		for (int i = 0; i < TOTALSOUNDBUFFER; i++)
		{
			if (_sound != NULL)
			{
				if (_sound[i]) _sound[i]->release();
			}
			if (_channel != NULL)
			{
				if (_channel[i]) _channel[i]->stop();
			}
		}
	}

	//포인터 해재
	SAFE_DELETE(_channel);
	SAFE_DELETE(_sound);

	//시스템 닫기
	if (_system != NULL)
	{
		_system->release();
		_system->close();
	}
}

void soundManager::update(void)
{
	//

	//메인게임에서 사운드매니저 업뎃하자
	_system->update();
}

void soundManager::render(void)
{
}

//사운드 추가(키값, 파일이름, bgm이냐?, 반복이냐?)
void soundManager::addSound(string keyName, string soundName, bool bgm, bool loop)
{
	if (loop)
	{
		if (bgm)//브금인지 효과음인지
		{
			_system->createStream(soundName.c_str(),
				FMOD_LOOP_NORMAL,
				0,
				&_sound[_mTotalSound.size()]);
		}
		else
		{
			_system->createSound(soundName.c_str(),
				FMOD_LOOP_NORMAL,
				0,
				&_sound[_mTotalSound.size()]);
		}
	}
	else
	{
		_system->createSound(soundName.c_str(),
			FMOD_DEFAULT,
			0,
			&_sound[_mTotalSound.size()]);
	}

	//맵에 사운드를 키값과 함께 담는다
	_mTotalSound.insert(make_pair(keyName, &_sound[_mTotalSound.size()]));
}

//사운드 플레이
void soundManager::play(string keyName, float volume)
{
	int count = 0;
	arrSoundIter iter = _mTotalSound.begin();
	for (iter; iter != _mTotalSound.end(); ++iter, count++)
	{
		if (keyName == iter->first)
		{
			//사운드 플레이
			_system->playSound(FMOD_CHANNEL_FREE,
				*iter->second,
				false,
				&_channel[count]);
			//볼륨세팅 0.0 ~ 1.0f
			_channel[count]->setVolume(volume);
		}
	}
}

//사운드 정지
void soundManager::stop(string keyName)
{
	int count = 0;
	arrSoundIter iter = _mTotalSound.begin();
	for (iter; iter != _mTotalSound.end(); ++iter, count++)
	{
		if (keyName == iter->first)
		{
			//사운드 정지
			_channel[count]->stop();
			break;
		}
	}
}

//사운드 일시정지
void soundManager::pause(string keyName)
{
	int count = 0;

	arrSoundIter iter = _mTotalSound.begin();

	for (iter; iter != _mTotalSound.end(); ++iter, count++)
	{
		if (keyName == iter->first)
		{
			_channel[count]->setPaused(true);
			break;
		}
	}
}

//사운드 다시재생
void soundManager::resume(string keyName)
{
	int count = 0;

	arrSoundIter iter = _mTotalSound.begin();

	for (iter; iter != _mTotalSound.end(); ++iter, count++)
	{
		if (keyName == iter->first)
		{
			_channel[count]->setPaused(false);
			break;
		}
	}
}

//플레이 중이냐?
bool soundManager::isPlaySound(string keyName)
{
	bool isPlay;
	int count = 0;
	arrSoundIter iter = _mTotalSound.begin();

	for (iter; iter != _mTotalSound.end(); ++iter, count++)
	{
		if (keyName == iter->first)
		{
			_channel[count]->isPlaying(&isPlay);
			break;
		}
	}

	return isPlay;
}
//일시정지 중이냐?
bool soundManager::isPauseSound(string keyName)
{
	bool isPause;

	int count = 0;
	arrSoundIter iter = _mTotalSound.begin();
	for (iter; iter != _mTotalSound.end(); ++iter, count++)
	{
		if (keyName == iter->first)
		{
			_channel[count]->isPlaying(&isPause);
		}
	}

	return isPause;
}